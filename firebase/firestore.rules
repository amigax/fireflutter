rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }
    match /chat {
      match /rooms/{my}/{other} {
        allow read: if true;
        allow write: if my == request.auth.uid || other == request.auth.uid;
      }
      match /messages/{roomId}/{messageId} {
    	  allow read: if myChatRoom(roomId);
        allow create, update: if myChatRoom(roomId) &&
          messageParticipants(roomId) &&
          (isBlocked() == false) &&
          messageFields();
        allow delete: if myChatRoom(roomId) && myChatMessage();
      }
      match /blocks/{myId}/{otherId} {
        allow read: if ( request.auth.uid == myId || request.auth.uid == otherId);
        allow write: if ( request.auth.uid == myId );
      }
    }
    match /users/{uid} {
      allow read: if true;
      allow write: if (request.auth.uid == uid);
    }

    match /settings/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /categories/{categoryId} {
      allow read: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }


    match /posts/{postId} {
      allow read: if true;
      allow create: if required(['category', 'authorUid', 'timestamp']) &&
        categoryExists() &&
        willBeMyPost()
      ;

      // Post update rule;
      // - Fails if timestamp is missing
      // - Success if nothing changes. if request.resource.data is same as resource.data
      // - Success if 'viewCounter' is updated only.
      allow update: if
        (isMyPost() && willBeMyPost() && mustUpdating(['timestamp']))
        ||
        onlyUpdating(['viewCounter', 'like', 'dislike'])
      ;
      allow delete: if isAdmin() || isMyPost();

      match /comments/{commentId} {
        allow read: if true;
        allow create: if required(['authorUid', 'timestamp']) && willBeMyDoc('authorUid');
        allow update: if
          (isMyDoc('authorUid')) && mustUpdating(['timestamp'])
          ||
          onlyUpdating(['like', 'dislike'])
        ;
        allow delete: if isAdmin() || isMyDoc('authorUid');
      }
    }

    match /reports/{reportId} {
      allow read: if isAdmin() || isMyDoc('reporterUid');
      allow create: if willBeMyDoc('reporterUid') &&
        fieldCheck(['target', 'targetId', 'reporterUid', 'reporteeUid', 'timestamp'], ['reason']) &&
        !exists(/databases/$(database)/documents/reports/$(reportId))
      ;
      allow update: if false;
      allow delete: if false;
    }

    // ***** For security test purpose *****
    //
    //
    match /test {
      match /notUpdating/{col}/{doc} {
        allow create: if true;
        allow update: if notUpdating(['a', 'b']);
      }
      match /onlyUpdating/{col}/{doc} {
        allow create: if true;
        allow update: if onlyUpdating(['a', 'b']);
      }
      match /mustUpdating/{col}/{doc} {
        allow create: if true;
        allow update: if mustUpdating(['a', 'b']);
      }
      match /fieldCheck/{col} {
        match /optionalOnly {
          allow create: if fieldCheck([], ['a', 'b', 'c']);
          allow update: if fieldCheck([], ['a', 'b', 'c']);
        }
        match /requiredAndOptional {
          allow create: if fieldCheck(['r'], ['a', 'b', 'c']);
          allow update: if fieldCheck(['r'], ['a', 'b', 'c']);
        }
      }
    }


    // ***** methods ****

    // check if 'A' & 'B' are blocked. 
    function isBlocked() {
      return
        exists(/databases/$(database)/documents/chat/blocks/$(request.resource.data.to)/$(request.resource.data.from)) ||
        exists(/databases/$(database)/documents/chat/blocks/$(request.resource.data.from)/$(request.resource.data.to));
    }

    // check if 'to', 'from' fiends are part of room id.
    function messageParticipants(roomId) {
      return request.resource.data.to in roomId.split('-') && request.resource.data.from in roomId.split('-');
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/settings/admins).data[request.auth.uid] == true;
    }
    

    function categoryExists() {
      return debug(exists(/databases/$(database)/documents/categories/$(request.resource.data.category)));
    }
  }
}

// ***** methods *****

// Check if roomId contains my Uid.
function myChatRoom(roomId) {
  return request.auth.uid in roomId.split('-');
}

// Check if the message is create by me.
function myChatMessage() {
  return request.auth.uid == resource.data.from;
}

function messageFields() {
  let required = ["to", "from", "timestamp", "text"];
  let optional = ["protocol"];
  return fieldCheck(required, optional);
}

// example: fieldCheck(['required', 'fields'], ['optional', 'fields'])
function fieldCheck(required, optional) {
  let all = required.concat( optional );
  // let fC = debug('****** fieldCheck *****');
  return required( required ) && request.resource.data.keys().hasOnly(all);
}


// * Warning : It's check the fields after save.
// * Warning : !!! It's not checking the incoming data fields !!!
function required(fields) {
  return request.resource.data.keys().hasAll( fields );
}


// Check if the field matches to the user id before save
//
// [field] must match the user uid.
// Use this to see if the document belongs to the user.
function isMyDoc(field) {
   return resource.data[field] == request.auth.uid;
}


// Check if the field matches to the user uid
//
// [field] must match the user uid.
// Use this to see if the document belongs to the user after save.
function willBeMyDoc(field) {
   return request.resource.data[field] == request.auth.uid;
}

// Check if login user is the one who created the post
function isMyPost() {
  return isMyDoc('authorUid');
}

// Check if the post belongs to the user (after create or update).
// Use this to validate that the author does not change after updating.
function willBeMyPost() {
  return willBeMyDoc('authorUid');
}


// Check if the [fields] does not change.
//
// Use this to block chainging on the properties in [fields].
// ```
// allow update: if notUpdating(['a', 'b', 'c']);
// ```
// Fields that are not listen in the fields parameters may change.
function notUpdating(fields) {
  return request.resource.data.diff(resource.data).unchangedKeys().hasAll(fields);
}

// Only updating [fields]
// - Updating only one or none of the [fields] is okay.
// - Fails if other properties rather than the [fields] are changed.
//
// - Success if only the properties in the list of [fields] should be changed.
// - Success if none of the properties are changed.
//
// Note, the action will succeed even if
//  the value of the fields do not changed or does not exists in incoming data.
//  This means, even if the incoming data is empty, it will succeed.
//  FIY, `[].hasOnly(['a', 'b'])` is true expressoin.
//  See, https://firebase.google.com/docs/reference/rules/rules.List#hasOnly
// 
// For instance, when client can only update like and dislike; see the following code;
// ```
// rule => onlyUpdating(['like', 'dislike']);
// code => succeed on `doc.update({})`, `doc.update({like: x})`,
// code => fails on `doc.update({title: 'x'})` 
// ```
// For anthother instance, the client can update 'viewCounter';
// ```
// rule => allow update: if onlyUpdating('viewCounter');
// code succeeds => doc.update({ viewCounter: FieldValue.increment(1) });
// code succeeds => doc.update({}); // no update is okay.
// code fials => doc.update({b: 'Banana'})
// ```
function onlyUpdating(fields) {
  return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields);
}


// The value of [fields] must be changed.
// Chaging other properties rather than [fields] is fine.
function mustUpdating(fields) {
  return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields);
}








